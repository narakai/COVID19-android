package com.clem.mymvvm.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import clem.app.mymvvm.model.bean.CovidItem.DailyJsonBeanConvert;
import java.util.List;

import clem.app.mymvvm.model.bean.CovidItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COVID_ITEM".
*/
public class CovidItemDao extends AbstractDao<CovidItem, Long> {

    public static final String TABLENAME = "COVID_ITEM";

    /**
     * Properties of entity CovidItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Type = new Property(1, int.class, "type", false, "TYPE");
        public final static Property Province = new Property(2, String.class, "province", false, "PROVINCE");
        public final static Property Country = new Property(3, String.class, "country", false, "COUNTRY");
        public final static Property Lat = new Property(4, String.class, "lat", false, "LAT");
        public final static Property Lng = new Property(5, String.class, "lng", false, "LNG");
        public final static Property DailyItems = new Property(6, String.class, "dailyItems", false, "DAILY_ITEMS");
    }

    private final DailyJsonBeanConvert dailyItemsConverter = new DailyJsonBeanConvert();

    public CovidItemDao(DaoConfig config) {
        super(config);
    }
    
    public CovidItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COVID_ITEM\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TYPE\" INTEGER NOT NULL ," + // 1: type
                "\"PROVINCE\" TEXT," + // 2: province
                "\"COUNTRY\" TEXT," + // 3: country
                "\"LAT\" TEXT," + // 4: lat
                "\"LNG\" TEXT," + // 5: lng
                "\"DAILY_ITEMS\" TEXT);"); // 6: dailyItems
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COVID_ITEM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CovidItem entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getType());
 
        String province = entity.getProvince();
        if (province != null) {
            stmt.bindString(3, province);
        }
 
        String country = entity.getCountry();
        if (country != null) {
            stmt.bindString(4, country);
        }
 
        String lat = entity.getLat();
        if (lat != null) {
            stmt.bindString(5, lat);
        }
 
        String lng = entity.getLng();
        if (lng != null) {
            stmt.bindString(6, lng);
        }
 
        List dailyItems = entity.getDailyItems();
        if (dailyItems != null) {
            stmt.bindString(7, dailyItemsConverter.convertToDatabaseValue(dailyItems));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CovidItem entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getType());
 
        String province = entity.getProvince();
        if (province != null) {
            stmt.bindString(3, province);
        }
 
        String country = entity.getCountry();
        if (country != null) {
            stmt.bindString(4, country);
        }
 
        String lat = entity.getLat();
        if (lat != null) {
            stmt.bindString(5, lat);
        }
 
        String lng = entity.getLng();
        if (lng != null) {
            stmt.bindString(6, lng);
        }
 
        List dailyItems = entity.getDailyItems();
        if (dailyItems != null) {
            stmt.bindString(7, dailyItemsConverter.convertToDatabaseValue(dailyItems));
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CovidItem readEntity(Cursor cursor, int offset) {
        CovidItem entity = new CovidItem( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // type
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // province
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // country
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // lat
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // lng
            cursor.isNull(offset + 6) ? null : dailyItemsConverter.convertToEntityProperty(cursor.getString(offset + 6)) // dailyItems
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CovidItem entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setType(cursor.getInt(offset + 1));
        entity.setProvince(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCountry(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLat(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLng(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDailyItems(cursor.isNull(offset + 6) ? null : dailyItemsConverter.convertToEntityProperty(cursor.getString(offset + 6)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CovidItem entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CovidItem entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CovidItem entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
